Λειτουργικά Συστήματα
Άσκηση 2
Δημήτρης Μπούσουλας
1115201500106

main.c :

Το πρόγραμμα ξεκινάει αποθηκεύοντας τα ορίσματα από την γραμμή εντολών και δημιουρώντας
τους κατάλληλους σημαφόρους και την απαραίτητη διαμοιραζόμενη μνήμη. Έπειτα δημιουργεί τις
3 διεργασίες. Η πρώτη (PM1) διαβάζει απ'το bzip.trace ένα-ένα τα traces και τα στένει στον
MM. Η δεύτερη (PM2) διαβάζει απ'το gcc.trace ένα-ένα τα traces και τα στέλνει στον MM. Η 
τρίτη είναι ο MM, o οποίος παίρνει διαδοχικά q traces απ'την PM1 και μετά q traces απ'την
PM2 μέχρι να λάβει max αναφορές από την κάθε διεργασία. Για κάθε αναφορά που παίρνει 
μετατρέπει τα 5 πρώτα της  ψηφία από δεκαεξαδικό σύστημα σε δεκαδικό (παίρνει μόνο τα 
πρώτα 5 γιατί τα επόμενα 3 είναι το offset). Έπειτα καλεί την search ώστε να δει αν αυτή 
η σελίδα υπάρχει στην μνήμη. Αν δεν υπάρχει αυξάνει τους κατάλληλους μετρητές κι ελέγχει
αν ήταν το κ+1 page fault (εδω μετράει ξεχωριστά τα page faults των εγγραφών της 1ης απ'της
2ης διεργασίας). Αν ήταν κάνει flush τον μισό πίνακα και εισάγει την αναφορά, αλλιώς ελέγχει
αν όλα τα frames της μνήμης είναι ήδη γεμάτα ώστε να κάνει flush όλο τον πίνακα (χωρίς να 
μηδενίσει τους 2 μετρητες που ελέγχουν πότε οι εγγραφές της εκάστοτε διεργασίας θα φτάσουν 
τα κ+1) και εισάγει την αναφορά. Αν  ούτε αυτό συμβαίνει δεν κάνει flush και απλά εισάγει 
την αναφορά. Στο τέλος εμφανίζει τα στατιστικά στοιχεία. Ο πατέρας περιμένει όλες τις 
διεργασίες να τερματίσουν ώστε να ελευθερώσει τους σημαφόρους, την διαμοιραζόμενη μνήμη και
ότι δομή χρειάζεται free.

hash.c :

Περιέχει την συνάρτηση κατακερματισμού η οποία διαιρεί την τιμή με το 53 κι επιστρέφει
το υπόλοιπο. Η search δέχεται σαν όρισμα τον πίνακα κατακερματισμού, το κλειδί και την
flag, η οποία υποδεικνύει αν πρόκειτε για αναφορά της 1ης ή της 2ης διερασίας, δηλαδή
αν βρίσκεται στο 1ο ή το 2ο μισό του πίνακα. Βρίσκει λοιπόν σε ποια θεση του πίνακα 
βρίσκεται και τρέχει την λίστα μέχρι το τέλος της. Αν βρέθηκε η αναφορά επιστρέφει δείκτη
στον κόμβο της λίστας στον οποίο βρεθηκε αλλιώς επιστρέφει NULL. Η insert βρίσκει με τον
ίδιο τρόπο την θέση του πίνακα και τρέχει όλη την λίστα ώστε να προσθέσει την αναφορά στο
τέλος της. Τέλος η delete ανάλογα με την ένδειξη της flag σβήνει το 1ο ή το 2ο μισό του
πίνακα. Για κάθε εγγραφή που σβήνει αυξάνει τον μετρητή ώστε να επιστρέψει πόσες εγγραφές
έσβησε, επίσης ελέγχει αν ήταν W ώστε να αυξήσει τον μετρητή των writes.

Στατιστικά:

Κρατώντας σταθέρες τις τιμές των q, max frames, max σε:
q=10
max frames= 256
max= 5000
και δοκίμαζοντας με τις εξής τιμές του k: 5, 10, 20, 50, 100, 150, 180, 190, 195, 256, 270
είχα τα εξής αποτελέσματα:

Για κ=5:
			Reads= 3308
			Writes= 1810
			Page faults= 3308
			Hits= 6692
			Frames in memory= 10
Για κ=10:
			Reads= 2664
			Writes= 1458
			Page faults= 2664
			Hits= 7336
			Frames in memory= 15
Για κ=20:
			Reads= 2135
			Writes= 1157
			Page faults= 2135
			Hits= 7865
			Frames in memory= 37
Για κ=50:
			Reads= 1642
			Writes= 955
			Page faults= 1642
			Hits= 8358
			Frames in memory= 63
Για κ=100:
			Reads= 1419
			Writes= 863
			Page faults= 1419
			Hits= 8581
			Frames in memory= 108
Για κ=150:
			Reads= 1389
			Writes= 859
			Page faults= 1389
			Hits= 8611
			Frames in memory= 62
Για κ=180:
			Reads= 1327
			Writes= 839
			Page faults= 1327
			Hits= 8673
			Frames in memory= 243
Για κ=190:
			Reads= 1368
			Writes= 828
			Page faults= 1368
			Hits= 8632
			Frames in memory= 224
Για κ=195:
			Reads= 1388
			Writes= 839
			Page faults= 1388
			Hits= 8612
			Frames in memory= 214
Για κ=256:
			Reads= 1391
			Writes= 833
			Page faults= 1391
			Hits= 8609
			Frames in memory= 109
Για κ=270:
			Reads= 1386
			Writes= 832
			Page faults= 1386
			Hits= 8614
			Frames in memory= 256

Αποτελέσματα τα οποία δείχνουν ότι όσο μεγαλώνει το κ τόσο μικραίνει το πλήθος των page
faults, των reads και των writes στον δίσκο ενώ αντίστροφα ανεβαίνει το πλήθος των hits
και των frames που μένουν στην μνήμη. Όλα αυτά μέχρι το κ να φτάσει 180 καθώς από κει κι
έπειτα όσο και να αυξάνει το κ δεν υπάρχει μεγάλη αλλαγή στους παραπάνω αριθμούς (ούτε
μείωση, ούτε αυξηση).
